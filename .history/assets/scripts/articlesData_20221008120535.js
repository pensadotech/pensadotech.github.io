// There is no simple way to load a JSON file when the application loads
// It seems there is some kind of security restriction, and make sense
// to avoid hackers loading unwanted files and the application loading them.
// To have an initial set of data that need to be loaded on start, 
// it seem that the best option is to define an initial array as 
//a independed JS file and use it to present the data in the screen 

var dataArr = [{
  articleId: 1,
  title: 'Word Games',
  subtitle: 'Java script',
  image: 'wordgame.png',
  imageSize: '100',
  imageSizeDetail:'90',
  description1:'The game follows the basic idea of the “hangman game” but without anyone getting hanged. ',
  description2:'It is a friendly game where the player needs to guess the hidden word revealing one ',
  description3:'letter a time, and up to 12 guesses.',
  description4:'',
  description5:'',
  sourceCode: 'https://github.com/pensadotech/WordGuessGame',
  url: 'https://pensadotech.github.io/WordGuessGame/',
  sourceCodeIcon:'git.png',
  urlIcon: 'githubPage.jpg'
},
{
  articleId: 2,
  title: 'RPG Star Wars',
  subtitle: 'Java script',
  image: 'starwars.jpg',
  imageSize: '90',
  imageSizeDetail:'80',
  description1:'The game is a combat driven by random health points, random attack, and counter attack powers. ',
  description2:'The player selects a character,and must face the remaining opponents to win the battle. ',
  description3:'By selecting one enemy at a time,and using the attack button,the faith of the battle is left to chances.',
  description4:'',
  description5:'',
  sourceCode: 'https://github.com/pensadotech/unit-4-game',
  url: 'https://pensadotech.github.io/unit-4-game/',
  sourceCodeIcon:'git.png',
  urlIcon: 'githubPage.jpg'
},
{
  articleId: 3,
  title: 'Trivia Night',
  subtitle: 'Java script',
  image: 'triviaNight.png',
  imageSize: '90',
  imageSizeDetail:'80',
  description1:'The game will test the player knowledge about our solar system by presenting five question that ',
  description2:'must be answered in 60 seconds. The game will celebrate when the answer is correct, or give ',
  description3:'feedback when the answer is incorrect.',
  description4:'',
  description5:'',
  sourceCode: 'https://github.com/pensadotech/TriviaGame',
  url: 'https://pensadotech.github.io/TriviaGame/', 
  sourceCodeIcon:'git.png',
  urlIcon: 'githubPage.jpg'
},
{
  articleId: 4,
  title: 'New York times',
  subtitle: 'Java script',
  image: 'nyt.png',
  imageSize: '80',
  imageSizeDetail:'70',
  description1:'The application connects to The New York Times to provide the latest top stories or give the user ',
  description2:'the capability to search special topics. The provided abstract will provide a link to access the ',
  description3:'full story.',
  description4:'',
  description5:'',
  sourceCode: 'https://github.com/pensadotech/NYT_NEWS',
  url: 'https://pensadotech.github.io/NYT_NEWS/',
  sourceCodeIcon:'git.png',
  urlIcon: 'githubPage.jpg'
},
{
  articleId: 5,
  title: 'Giftastic',
  subtitle: 'Java script',
  image: 'giphy.png',
  imageSize: '60',
  imageSizeDetail:'50',
  description1:'The application connects to the <a href="https://giphy.com" target="_blank">GIPHY</a> website to  bring funny ',
  description2:'videos about any topic. The application suggests animals as a topic, but the user can  include additional ones. ',
  description3:'The initial selection presents a fixed image, but by clicking on it, the image comes alive, and can be stopped by clicking again.',
  description4:'',
  description5:'',
  sourceCode: 'https://github.com/pensadotech/GiphyApp',
  url: 'https://pensadotech.github.io/GiphyApp/',
  sourceCodeIcon:'git.png',
  urlIcon: 'githubPage.jpg'
},
{
  articleId: 6,
  title: 'Train Schedule',
  subtitle: 'Java script',
  image: 'TrainSchedule.jpg',
  imageSize: '80',
  imageSizeDetail:'70',
  description1:'The train schedule is a sample application using <a href="https://firebase.google.com/" target="_blank"><b>google firebase</b></a> ',
  description2:'and <a href="https://momentjs.com/" target="_blank">moment JavaScript library</a> to  calculate the train next arrival base on ',
  description3:'a first starting time in the day. The page refreshes automatically every minute, to reflect properly arrival schedules.',
  description4:'',
  description5:'',
  sourceCode: 'https://github.com/pensadotech/TrainSchedule',
  url: 'https://pensadotech.github.io/TrainSchedule/',
  sourceCodeIcon:'git.png',
  urlIcon: 'githubPage.jpg'
},

{
  articleId: 7,
  title: 'Crypto Watcher',
  subtitle: 'Java script',
  image: 'CryptoWatcher.jpg',
  imageSize: '60',
  imageSizeDetail:'50',
  description1:'The Crypto Watcher is a sample application that exercise the use of <b>google firebase</b> and <a href="https://min-api.cryptocompare.com/" target="_blank">Crypto Compare ',
  description2:'API</a>, and <a href="https://newsapi.org/s/cnn-api" target="_blank">CNN API</a>. It also uses an accounting JavaScript library to assist displaying dollar amounts in',
  description3:'the screen. The project allows the user to select coins to follow in its personal portfolio and add holdings to reflect the portfolio value.',
  description4:'',
  description5:'',
  description6:'',
  description7:'',
  sourceCode: 'https://github.com/pensadotech/CryptoWatcher',
  url: '',
  sourceCodeIcon:'git.png',
  urlIcon: 'githubPage.jpg'
},
{
  articleId: 8,
  title: 'Liri Bot',
  subtitle: 'Node JS',
  image: 'bot.png',
  imageSize: '60',
  imageSizeDetail:'50',
  description1:'LIRI Bot is an application made with NodeJS, and even though is not a server, it offers basic infrastructure ',
  description2:'to act upon user commands. The program will receive a command and a search-topic as parameters, and base on these, ',
  description3:'it will retrieve data using particular API and present the results in the Terminal and a log file. The application ',
  description4:'will retrieve data related with concerts,music, or videos.',
  description5:'',
  description6:'',
  description7:'',
  sourceCode: 'https://github.com/pensadotech/liri-node-app',
  url: '',
  sourceCodeIcon:'git.png',
  urlIcon: ''
},
{
  articleId: 9,
  title: 'Word Games',
  subtitle: 'Node JS',
  image: 'wordgame.png',
  imageSize: '100',
  imageSizeDetail:'90',
  description1: 'The game has been built usining NodeJS and follows the basic idea of the “hangman game” but without ',
  description2:'anyone getting hanged. It is a friendly game where the player needs to guess the hidden word',
  description3:'revealing one letter a time, and up to 12 guesses.',
  description4:'',
  description5:'',
  description6:'',
  description7:'',
  sourceCode: 'https://github.com/pensadotech/NodeWordGuessGame',
  url: '',
  sourceCodeIcon:'git.png',
  urlIcon: 'githubPage.jpg'
},
{
  articleId: 10,
  title: 'Friend Finder',
  subtitle: 'Node JS',
  image: 'friends.jpg',
  imageSize: '80',
  imageSizeDetail:'60',
  description1:'The application was made using Node JS and Express, and offers a good example how to put them together to create a server application. ',
  description2:'Express simplify a great deal the server programming side. The application encapsulates html and API routes in different custom modules, ',
  description3:'keeping separated the functionality. Additionally, the core functionality of the application is stored under an additional module inside ',
  description4:'the data folder. The application stores the questionnaire answers in a array, which is a step away from storing it in a database.',
  description5:'',
  description6:'',
  description7:'',
  sourceCode: 'https://github.com/pensadotech/FriendFinder2',
  url: '',
  sourceCodeIcon:'git.png',
  urlIcon: 'githubPage.jpg'
},
{
  articleId: 11,
  title: 'Reading List',
  subtitle: 'Node JS',
  image: 'Reading.jpg',
  imageSize: '80',
  imageSizeDetail:'50',
  description1:'The application was made using Node JS, Express, and JSX. It offers a good example how to use react templates in the server, ',
  description2:'filling the placeholder with data stored in the server itself. The application encapsulates html and API routes in different ',
  description3:'custom modules, keeping separated the functionality. Additionally, the core functionality of the application is stored under an ',
  description4:'additional module inside the data folder. The application stores a list of books in a bookshelf object, using a Book object ',
  description5:'constructor to manipulate the data. The application is one step to store the data in a database.',
  description6:'',
  description7:'',
  sourceCode: 'https://github.com/pensadotech/ReadingList',
  url: '',
  sourceCodeIcon:'git.png',
  urlIcon: 'githubPage.jpg'
},
{
  articleId: 12,
  title: 'Bamazon Store',
  subtitle: 'Node JS',
  image: 'onlinestore.png',
  imageSize: '90',
  imageSizeDetail:'80',
  description1:'The application is a pretend online store. The application was made using Node JS, sequlize (ORM), and mysql2 libraries. ',
  description2:'The application uses a MySql database. The application includes html and API routes to work with the screen, adding department ',
  description3:'and products, and present an available product list in the store front. The user can select the items and quantity, adding them ',
  description4:'into a shopping cart.After selecting the desired products, the user can view the shopping cart, can decide to put the order, ',
  description5:'return to shop for additional items, and simply remove the shopping cart.',
  description6:'',
  description7:'',
  sourceCode: 'https://github.com/pensadotech/bamazonStore',
  url: '',
  sourceCodeIcon:'git.png',
  urlIcon: 'githubPage.jpg'
},

{
  articleId: 13,
  title: 'Library',
  subtitle: 'Node JS',
  image: 'BookLibrary.jpg',
  imageSize: '80',
  imageSizeDetail:'70',
  description1:'The application is a pretend Library system, made using Node JS, MySQL, sequlize (ORM), and Passport. ',
  description2:'The application includes models, API routes, HTML routes, and a public folder for what the user will see in the internet browser. ',
  description3:'The application offers functionality where the user can manage library sections (shelfs) where the books will be stored, functionality ',
  description4:'to manage the library inventory, and a frontend for the  user to search for books base on title, author, year, genre, and ISBN. ',
  description5:'Additionally, as user borrows books through through the online checkout, the quantity in the ',
  description6:'inventory is affected, and also the usage totals is increased. The totals are used to build a chart ',
  description7:'that provides a graphical representation of user’s preferences, using google charts.',
  sourceCode: 'https://github.com/pensadotech/Biblioteca2',
  url: '',
  sourceCodeIcon:'git.png',
  urlIcon: 'heroku.png'
},
{
  articleId: 14,
  title: 'Secure site',
  subtitle: 'Node JS',
  image: 'ScureSite.jpg',
  imageSize: '80',
  imageSizeDetail:'70',
  description1:'I wrote this project as an example how to add authorization and authentication using Node JS, ',
  description2:'Express, sequelize (ORM), Passport npm, and MySQL. Passport is very popular library in the',
  description3:'JavaScript world for adding login functionality with <a href="http://www.passportjs.org/" target="_blank">Passport</a>. ',
  description4:'The project offer functionality to sing-Up, sign-in, and sign-out. In other words, ',
  description5:'the user can enroll into the application, login, and logout. Also, the system will restrict ',
  description6:'access to a page, unless the user has logged in. ',
  description7:'',
  sourceCode: 'https://github.com/pensadotech/SecureSite',
  url: '',
  sourceCodeIcon:'git.png',
  urlIcon: 'githubPage.jpg'
},
{
  articleId: 15,
  title: 'NASA news',
  subtitle: 'Node JS',
  image: 'nasaTransp.png',
  imageSize: '60',
  imageSizeDetail:'50',
  description1:'The application is an exercise retrieving data from a Website (html file) using a scraping library. ',
  description2:'In this case the example uses <b>axios</b>, <b>cheerio</b>. The application uses <b>express</b>',
  description3:'and it is storing the data in a MongoDB using <b>mongoose</b>.',
  description4:'',
  description5:'',
  description6:'',
  description7:'',
  sourceCode: 'https://github.com/pensadotech/NewsMongoScraper',
  url: '',
  sourceCodeIcon:'git.png',
  urlIcon: 'heroku.png'
},
{
  articleId: 16,
  title: 'Clicky Game',
  subtitle: 'Node JS',
  image: 'clickGame.png',
  imageSize: '80',
  imageSizeDetail:'50',
  description1:'The application is a memory game using <b>NodeJS</b>, <b>Express</b>, and <b>React</b>. The application falls into the definition of ',
  description2:'a single page application, and was built using several components.  After loading the application, it will present  ',
  description3:'multiple cards. To win the game, the player needs to select all cards once. The player will lose if a card is  ',
  description4:'selected more than once. After a card selection, the application will shuffle them, changing positions. As the  ',
  description5:'user selects more cards, it will be harder to remember what card has been selected already.  ',
  description6:'',
  description7:'',
  sourceCode: 'https://github.com/pensadotech/ClickyGame',
  url: '',
  sourceCodeIcon:'git.png',
  urlIcon: 'heroku.png'
},
{
  articleId: 17,
  title: 'New MERN App',
  subtitle: 'MERN',
  image: 'MERN.png',
  imageSize: '80',
  imageSizeDetail:'50',
  description1:'Putting together a MERN application is a complicated task, and it requires many manual steps and ',
  description2:'considerations. This article takes the reader through the steps required, using an example. ',
  description3:'I hope new MERN developers will find it beneficial. ',
  description4:'',
  description5:'',
  description6:'',
  description7:'',
  sourceCode: 'https://github.com/pensadotech/MERN_BlankApp',
  url: '',
  sourceCodeIcon:'git.png',
  urlIcon: ''
},
{
  articleId: 18,
  title: 'NASA news',
  subtitle: 'MERN',
  image: 'nasaTransp.png',
  imageSize: '60',
  imageSizeDetail:'50',
  description1:'The application helps the user searching for information at NASA breaking news RSS ',
  description2:'(https://www.nasa.gov/rss/dyn/breaking_news.rss) and presents articles to the user, giving the ',
  description3:'capability to store in the database articles that are considered interesting. ',
  description4:'This is an exercise that embodies a MERN application. It uses **Mongo DB**, **Express**, ',
  description5:'**React**, and **Node JS** (MERN). However, it also uses **mongoose (ODM)**, **axios**, and **cheerio** libraries.',
  description6:'',
  description7:'',
  sourceCode: 'https://github.com/pensadotech/NasaMern',
  url: '',
  sourceCodeIcon:'git.png',
  urlIcon: 'heroku.png'
},

{
  articleId: 19,
  title: 'Vet Clinic',
  subtitle: 'MERN',
  image: 'paw-print1.jpg',
  imageSize: '70',
  imageSizeDetail:'50',
  description1:'This project is a prototype for an animal clinic system, created to demonstrate the use of Mongo DB, ',
  description2:'Express, React, and Node JS technologies. This is an exercise that embodies a MERN single ',
  description3:'page application with React, and under MVC patern. The application provides functionality to add ',
  description4:'basic elements as Doctors, Patients, and medicines, which are used to create appointments or calculate ',
  description5:'medicine dosage for patients. In addition, the application offers a restricted login functionality ',
  description6:'and the capability to send emails for Appointments and user accounts.',
  description7:'',
  sourceCode: 'https://github.com/pensadotech/VetClicnic',
  url: '',
  sourceCodeIcon:'git.png',
  urlIcon: 'heroku.png'
},
{
  articleId: 20,
  title: 'Clicky Game',
  subtitle: 'Angular',
  image: 'clickGame.png',
  imageSize: '80',
  imageSizeDetail:'50',
  description1:'The application is a memory game using <b>Angular</b>. The application falls into the definition of ',
  description2:'a single page application, and was built using several components.  After loading the application, it will present  ',
  description3:'multiple cards. To win the game, the player needs to select all cards once. The player will lose if a card is  ',
  description4:'selected more than once. After a card selection, the application will shuffle them, changing positions. As the  ',
  description5:'user selects more cards, it will be harder to remember what card has been selected already.  ',
  description6:'',
  description7:'',
  sourceCode: 'https://github.com/pensadotech/ClickyGameNg',
  url: '',
  sourceCodeIcon:'git.png',
  urlIcon: 'heroku.png'
},
{
  articleId: 20,
  title: 'Time Converter',
  subtitle: 'WPF .NET',
  image: 'time.jpeg',
  imageSize: '70',
  imageSizeDetail:'50',
  description1:'This project is a NET WPF application and it is a very simple application with functionality to ',
  description2:'convert time into second since midnight and vice versa. Although, it is a very simple concept, ',
  description3:'the exercise presents a .NET application with several formalities, by dividing functionality into ',
  description4:'layers, including clear separation concerns, and seams for dependency injection. The exercise takes ',
  description5:'advantage of dependency injection using Microsoft Unity and unit testing using MOQ. This projects ',
  description6:'also uses mahapps.metro styling for WPF applications, which is a simple way to provide a metro-style ',
  description7:'user interface (e.g. Window 10 style).',
  sourceCode: 'https://github.com/pensadotech/TimeConverter',
  url: '',
  sourceCodeIcon:'git.png',
  urlIcon: 'heroku.png'
}
]